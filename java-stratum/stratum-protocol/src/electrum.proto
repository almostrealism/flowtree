package stratum;

option java_package = "org.smartwallet.stratum.protos";
option java_outer_classname = "Protos";

message Electrum {
    repeated Transaction transactions = 1;
}

message Transaction {
    // Bitcoin serialized transaction
    required bytes transaction = 1;
    required TransactionConfidence confidence = 2;
    optional int64 updated_at = 3; // millis since epoch the transaction was last updated
}

message TransactionConfidence {
    enum Type {
        UNKNOWN = 0;
        BUILDING = 1; // In best chain.  If and only if appeared_at_height is present.
        PENDING = 2; // Unconfirmed and sitting in the networks memory pools, waiting to be included in the chain.
        NOT_IN_BEST_CHAIN = 3; // Deprecated: equivalent to PENDING.
        DEAD = 4; // Either if overriding_transaction is present or transaction is dead coinbase
    }

    // This is optional in case we add confidence types to prevent parse errors - backwards compatible.
    optional Type type = 1;

    // If type == BUILDING then this is the chain height at which the transaction was included.
    optional int32 appeared_at_height = 2;

    // If set, hash of the transaction that double spent this one into oblivion. A transaction can be double spent by
    // multiple transactions in the case of several inputs being re-spent by several transactions but we don't
    // bother to track them all, just the first. This only makes sense if type = DEAD.
    optional bytes overriding_transaction = 3;

    // If type == BUILDING then this is the depth of the transaction in the blockchain.
    // Zero confirmations: depth = 0, one confirmation: depth = 1 etc.
    optional int32 depth = 4;

    // deprecated - do not recycle this numeric identifier
    // optional int64 work_done = 5;

    // repeated PeerAddress broadcast_by = 6;

    // Where did we get this transaction from? Knowing the source may help us to risk analyze pending transactions.
    enum Source {
        SOURCE_UNKNOWN = 0;  // We don't know where it came from, or this is a wallet from the future.
        SOURCE_NETWORK = 1;  // We received it from a network broadcast. This is the normal way to get payments.
        SOURCE_SELF = 2;     // We made it ourselves, so we know it should be valid.
        // In future:
        // - direct from trusted counterparty, eg via bluetooth/wifi direct
        // - direct from untrusted counterparty
        // - from a wallet that uses trusted computing/secure hardware that won't create double spends
    }
    optional Source source = 7;
}

